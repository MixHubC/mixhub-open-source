# add or override properties
# See https://github.com/typesafehub/config/blob/master/HOCON.md for more details

#cookies
application.secret = "97.5wUSOprur1bu9/JGEuXzR{}*uDljCmN7Me6Rxn=$IgVrJpu)q*4}pRLZ#yc&f"
#900 years
session.cookie.maxAge = 382400000
session.cookie.name = "mixhub"

#mysql
db.url = "jdbc:mysql://localhost/mixhub"
db.user = root
db.password = toor
db.cachePrepStmts = true

# hikari
hikari.autoCommit = true
hikari.maximumPoolSize = 20

# netty
server.module = org.jooby.netty.Netty

server.http2.cleartext = true

netty {

  http {

    MaxInitialLineLength = 4k

    MaxHeaderSize = ${server.http.HeaderSize}

    MaxChunkSize = 16k

    #100mb
    MaxContentLength = 102400k

    IdleTimeout = ${server.http.IdleTimeout}

  }

  threads {

    Min = ${server.threads.Min}

    Max = ${server.threads.Max}

    Name = netty task

    Boss = 1

    Worker = ${runtime.processors-x2}

  }

  options {

    SO_REUSEADDR = true

  }

  worker {

    options {

      SO_REUSEADDR = true

    }
  }
}

###################################################################################################
#! application
###################################################################################################
application {

  # environment default is: dev
  env = dev

  # contains the simple name of package of your application bootstrap class.
  # For example: com.foo.App -> foo
  # name = App.class.getPackage().getName().lastSegment()
  name = "The Mix Hub ONLINE"
  # application namespace, default to app package. set it at runtime
  # ns = App.class.getPackage().getName()
  # class = App.class.getName()
  # tmpdir
  tmpdir = ${java.io.tmpdir}/${application.name}
  #tmpdir = "temp"

  # path (a.k.a. as contextPath)
  path = /

  # localhost
  host = localhost

  # HTTP ports
  port = 8080

  # uncomment to enabled HTTPS
  # securePort = 8443
  # we do UTF-8
  charset = UTF-8

  # date format
  dateFormat = dd-MMM-yyyy

  # number format, system default. set it at runtime
  # numberFormat = DecimalFormat.getInstance(${application.lang})).toPattern()
  # comma separated list of locale using the language tag format. Default to: Locale.getDefault()
  # lang = Locale.getDefault()
  # timezone, system default. set it at runtime
  # tz = ZoneId.systemDefault().getId()
  # redirect to/force https
  # example: https://my.domain.com/{0}
  redirect_https = ""

}

###################################################################################################
#! session defaults
###################################################################################################
session {

  # we suggest a timeout, but usage and an implementation is specific to a Session.Store implementation
  timeout = 30m

  # save interval, how frequently we must save a none-dirty session (in millis).
  saveInterval = 60s

  cookie {

    # name of the cookie
    name = themixhub.online

    # cookie path
    path = /

    # expires when the user closes the web browser
    maxAge = -1

    httpOnly = true

    secure = false

  }

}

###################################################################################################
#! server defaults
###################################################################################################
server {

  http {

    HeaderSize = 8k

    # Max response buffer size
    ResponseBufferSize = 16k

    # Max request body size to keep in memory
    RequestBufferSize = 1m

    # Max request size total (body + header)
    MaxRequestSize = 200k

    IdleTimeout = 0

    Method = ""

  }

  threads {

    Min = ${runtime.processors}

    Max = ${runtime.processors-x8}

    IdleTimeout = 60s

  }

  routes {

    # Guava Cache Spec
    Cache = "concurrencyLevel="${runtime.concurrencyLevel}",maximumSize="${server.threads.Max}

  }

  ws {

    # The maximum size of a text message.
    MaxTextMessageSize = 16k

    # The maximum size of a binary message.
    MaxBinaryMessageSize = 16k

    # The time in ms (milliseconds) that a websocket may be idle before closing.
    IdleTimeout = 5minutes

  }

  http2 {

    cleartext = true

    enabled = false

  }

}

###################################################################################################
#! assets
###################################################################################################
assets {

  #! If asset CDN is present, the asset router will do a redirect to CDN and wont serve the file locally
  #! /assets/js/index.js -> redirectTo(cdn + assets/js/index.js)
  cdn =  ""

  etag = true

  lastModified = true

  env = ${application.env}

  charset = ${application.charset}

  # -1 to disable or HOCON duration value
  cache.maxAge = -1

}

###################################################################################################
#! runtime
###################################################################################################
#! number of available processors, set it at runtime
#! runtime.processors = Runtime.getRuntime().availableProcessors()
#! runtime.processors-plus1 = ${runtime.processors} + 1
#! runtime.processors-plus2 = ${runtime.processors} + 2
#! runtime.processors-x2 = ${runtime.processors} * 2
###################################################################################################
#! status codes
###################################################################################################
err.java.lang.IllegalArgumentException = 400

err.java.util.NoSuchElementException = 400

err.java.io.FileNotFoundException = 404

###################################################################################################
#! alias
###################################################################################################
contextPath = ${application.path}